{"version":3,"sources":["src/Piece.js","src/GameField.js","src/tetris.js","src/index.js"],"names":["SIZE","tetrominos","Piece","column","row","color","type","matrix","di","dj","ctx","fillStyle","strokeStyle","i","length","j","toCoords","x","drawRoundRect","y","width","height","radius","fill","stroke","tl","tr","br","bl","defaultRadius","side","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","GameField","rows","columns","playfield","col","value","gameOver","score","speed","canvas","showGameOver","cellCol","cellRow","tetromino","every","el","r","c","context","globalAlpha","fillRect","font","textAlign","textBaseline","fillText","COLUMNS","ROWS","GREEN","RED","YELLOW","BLUE","GREY","COLORS","types","additionalTypes","counter","frames","gameState","init","activePiece","getRandomInt","getRandomColor","field","prevSec","update","time","Math","ceil","isValidMove","shift","placeTetromino","moveActivePieceRight","moveActivePieceLeft","moveActivePieceDown","rotateActivePiece","rotate","restartGame","draw","getContext","scoreCtx","clearRect","onKeyDown","event","key","max","floor","random","N","result","map","val","document","addEventListener","lastTick","stopCycle","getElementById","tickLength","run","window","requestAnimationFrame","nextTick","performance","now"],"mappings":"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","file":"src.2c7694e0.js","sourceRoot":"..","sourcesContent":["const SIZE = 22\nconst tetrominos = {\n  'I': [\n    [0,0,0,0],\n    [1,1,1,1],\n    [0,0,0,0],\n    [0,0,0,0]\n  ],\n  'J': [\n    [1,0,0],\n    [1,1,1],\n    [0,0,0],\n  ],\n  'L': [\n    [0,0,1],\n    [1,1,1],\n    [0,0,0],\n  ],\n  'O': [\n    [1,1],\n    [1,1],\n  ],\n  'S': [\n    [0,1,1],\n    [1,1,0],\n    [0,0,0],\n  ],\n  'Z': [\n    [1,1,0],\n    [0,1,1],\n    [0,0,0],\n  ],\n  'T': [\n    [0,1,0],\n    [1,1,1],\n    [0,0,0],\n  ],\n  '.': [\n    [1]\n  ],\n  'П': [\n    [1,1,1],\n    [1,0,1],\n    [0,0,0],\n  ]\n};\n\nexport default class Piece {\n  constructor(column, row, color, type) {\n    this.row = row\n  \tthis.column = column\n  \tthis.color = color\n    this.type = type\n    this.matrix = tetrominos[this.type]\n  }\n\n  shift(di, dj) {\n    this.column += di\n    this.row += dj\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = this.color\n    ctx.strokeStyle = this.color\n    for(let i = 0; i < this.matrix.length; i++) {\n      for(let j = 0; j < this.matrix.length; j++) {\n        if (this.matrix[i][j]) {\n          const [x, y] = toCoords(this.row + i, this.column + j)\n          drawRoundRect(ctx, y, x, 20, 20, 5, true, false)\n        }\n      }\n    }\n  }\n}\n\nexport function toCoords(i, j) {\n  return [i * SIZE + 1, j * SIZE + 1]\n}\n\nexport function drawRoundRect(ctx, x, y, width, height, radius, fill, stroke) {\n  if (typeof stroke === 'undefined') {\n    stroke = true\n  }\n  if (typeof radius === 'undefined') {\n    radius = 5\n  }\n  if (typeof radius === 'number') {\n    radius = {tl: radius, tr: radius, br: radius, bl: radius}\n  } else {\n    var defaultRadius = {tl: 0, tr: 0, br: 0, bl: 0}\n    for (var side in defaultRadius) {\n      radius[side] = radius[side] || defaultRadius[side]\n    }\n  }\n  ctx.beginPath()\n  ctx.moveTo(x + radius.tl, y)\n  ctx.lineTo(x + width - radius.tr, y)\n  ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr)\n  ctx.lineTo(x + width, y + height - radius.br)\n  ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height)\n  ctx.lineTo(x + radius.bl, y + height)\n  ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl)\n  ctx.lineTo(x, y + radius.tl)\n  ctx.quadraticCurveTo(x, y, x + radius.tl, y)\n  ctx.closePath()\n  if (fill) {\n    ctx.fill()\n  }\n  if (stroke) {\n    ctx.stroke()\n  }\n}","import {\n  toCoords,\n  drawRoundRect\n} from './Piece'\n\nexport default class GameField {\n  constructor(rows, columns) {\n    this.rows = rows\n    this.columns = columns\n    this.playfield = []\n    for (let row = 0; row < this.rows; row++) {\n      this.playfield[row] = [];\n      for (let col = 0; col < this.columns; col++) {\n        this.playfield[row][col] = {value: 0, color: '#000000'};\n      }\n    }\n    this.gameOver = false\n    this.score = 0\n    this.speed = 300\n  }\n\n  draw(canvas, ctx) {\n    for (let row = 0; row < this.playfield.length; row++) {\n      for (let col = 0; col < this.playfield[0].length; col++) {  \n        if (this.playfield[row][col].value) {\n          ctx.fillStyle = this.playfield[row][col].color\n          ctx.strokeStyle = this.playfield[row][col].color\n          const [x, y] = toCoords(row, col)\n          drawRoundRect(ctx, y, x, 20, 20, 5, true, false)\n        }\n      }\n    }\n\n    if (this.gameOver) {\n      this.showGameOver(canvas, ctx)\n    }\n  }\n\n  isValidMove(matrix, cellCol, cellRow) {\n    for (let row = 0; row < matrix.length; row++) {\n      for (let col = 0; col < matrix.length; col++) {\n        if (matrix[row][col] && (\n            cellCol + col < 0 ||\n            cellCol + col === this.playfield[0].length ||\n            cellRow + row === this.playfield.length ||\n            this.playfield[cellRow + row][cellCol + col].value)\n          ) {\n            return false\n        }\n      }\n    }\n    return true\n  }\n\n  placeTetromino(tetromino) {\n    for (let row = 0; row < tetromino.matrix.length; row++) {\n      for (let col = 0; col < tetromino.matrix.length; col++) {\n        if (tetromino.matrix[row][col]) {\n          if (tetromino.row + row <= 1) {\n           this.gameOver = true\n          }\n          this.playfield[tetromino.row + row][tetromino.column + col] = {value: 1, color: tetromino.color};\n        }\n      }\n    }\n    \n    for (let row = this.playfield.length - 1; row >= 0; row--) {\n      if (this.playfield[row].every(el => { return el.value === 1 })) {\n        this.score += 1\n        if (this.speed > 20) {\n          this.speed -= 20\n        }\n        for (let r = row; r > 0; r--) {\n          for (let c = 0; c < this.playfield[r].length; c++) {\n            this.playfield[r][c] = this.playfield[r-1][c];\n          }\n        }\n        for (let col = 0; col < this.playfield[0].length; col++) {\n          this.playfield[0][col] = {value: 0, color: '#000000'}\n        }\n        row++\n      }\n    }\n  }\n\n  showGameOver(canvas, context) {\n    context.fillStyle = 'black';\n    context.globalAlpha = 0.75;\n    context.fillRect(0, canvas.height / 2 - 60, canvas.width, 140);\n    context.globalAlpha = 1;\n    context.fillStyle = 'white';\n    context.font = '36px monospace';\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    context.fillText('GAME OVER!', canvas.width / 2, canvas.height / 2 - 30);;\n    context.fillText(`Score:${this.score}`, canvas.width / 2, canvas.height / 2 + 10);\n    context.font = '18px monospace';\n    context.fillText('Press R to restart', canvas.width / 2, canvas.height / 2 + 50);\n  }\n}\n","import Piece from './Piece'\nimport GameField from './GameField'\n\nconst COLUMNS = 12\nconst ROWS = 24\n\nconst GREEN = '#45FD6B'\nconst RED = '#FC393E'\nconst YELLOW = '#FED248'\nconst BLUE = '#3B73FB'\nconst GREY = '#DBE1F1'\n\nconst COLORS = [\n  GREEN,\n  RED,\n  YELLOW,\n  BLUE,\n  GREY\n]\n\nconst types = ['I', 'J', 'L', 'O', 'S', 'T', 'Z'];\nconst additionalTypes = ['.', 'П'];\nlet counter = 0\nlet frames = 0\n\nconst gameState = {}\n\nexport function init() {\n  gameState.activePiece = new Piece(\n    getRandomInt(COLUMNS - 4),\n    0,\n    getRandomColor(), \n    types[getRandomInt(types.length - 1)]\n  )\n\n  gameState.field = new GameField(ROWS, COLUMNS)\n  gameState.prevSec = 0\n}\n\n\nexport function update(time) {\n  frames++\n  const { prevSec, activePiece, field } = gameState\n  if (activePiece) {\n    if (prevSec != Math.ceil(time / field.speed)) {\n      gameState.prevSec = Math.ceil(time / field.speed)\n      if (field.isValidMove(activePiece.matrix, activePiece.column, activePiece.row + 1)) {\n        activePiece.shift(0, 1)\n      } else {\n        field.placeTetromino(activePiece)\n        gameState.activePiece = null\n      }\n    }\n  } else if (!field.gameOver){\n    counter++\n    if (counter % 5 != 0) {\n      gameState.activePiece = new Piece(\n        getRandomInt(COLUMNS - 4),\n        0,\n        getRandomColor(),\n        types[getRandomInt(types.length - 1)]\n      )\n    } else {\n      gameState.activePiece = new Piece(\n        getRandomInt(COLUMNS - 4),\n        0,\n        getRandomColor(),\n        additionalTypes[getRandomInt(additionalTypes.length - 1)]\n      )\n    }\n  }\n}\n\nfunction moveActivePieceRight() {\n  const { activePiece, field } = gameState\n\n  if (!activePiece) return\n\n  if (field.isValidMove(activePiece.matrix, activePiece.column + 1, activePiece.row)) {\n    activePiece.shift(1, 0)\n  }\n}\n\nfunction moveActivePieceLeft() {\n  const { activePiece, field } = gameState\n\n  if (!activePiece) return\n\n  if (field.isValidMove(activePiece.matrix, activePiece.column - 1, activePiece.row)) {\n    activePiece.shift(-1, 0)\n  }\n}\n\nfunction moveActivePieceDown() {\n  const { activePiece, field } = gameState\n\n  if (!activePiece) return\n\n  if (!field.isValidMove(activePiece.matrix, activePiece.column, activePiece.row + 1)) {\n    field.placeTetromino(activePiece)\n    return \n  }\n  activePiece.shift(0 ,1)\n}\n\nfunction rotateActivePiece() {\n  const { activePiece, field } = gameState\n\n  if (!activePiece) return\n\n  const matrix = rotate(activePiece.matrix)\n\n  if (field.isValidMove(matrix, activePiece.column, activePiece.row)) {\n    activePiece.matrix = matrix\n  }\n}\n\nfunction restartGame() {\n  const field = gameState.field\n  gameState.activePiece = null\n  field.score = 0\n  field.gameOver = false\n  field.speed = 300\n  for (let row = 0; row < field.rows; row++) {\n    for (let col = 0; col < field.columns; col++) {\n      field.playfield[row][col] = {value: 0, color: '#000000'};\n    }\n  }\n}\n\nexport function draw(canvas, score) {\n  const ctx = canvas.getContext('2d')\n  const scoreCtx = score.getContext('2d')\n  ctx.clearRect(0, 0, canvas.width, canvas.height)\n  scoreCtx.clearRect(0, 0, canvas.width, canvas.height)\n\n  const { activePiece, field } = gameState\n\n  if (activePiece) {\n    activePiece.draw(ctx)\n  }\n\n  field.draw(canvas, ctx)\n\n  scoreCtx.font = \"24px monospace\";\n  scoreCtx.fillStyle = \"#1C9905\"\n  scoreCtx.fillText(`Score:${field.score}`, 5, 30)\n}\n\nfunction onKeyDown(event) {\n  const { key } = event\n    if (key === \"ArrowRight\") {\n      moveActivePieceRight()\n    } else if (key === \"ArrowLeft\") {\n      moveActivePieceLeft()\n    } else if (key === \"ArrowDown\") {\n      moveActivePieceDown()\n    } else if (key === \"ArrowUp\") {\n      rotateActivePiece()\n    } else if (key === \"r\" || key === \"R\" || key === \"К\" || key === \"к\") {\n      restartGame()\n    }\n}\n\ndocument.addEventListener('keydown', onKeyDown)\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max))\n}\n\nfunction getRandomColor() {\n  return COLORS[getRandomInt(COLORS.length)]\n}\n\nfunction rotate(matrix) {\n  const N = matrix.length - 1;\n  const result = matrix.map((row, i) =>\n    row.map((val, j) => matrix[N - j][i])\n  );\n  return result;\n}\n","import {\n  init,\n  update,\n  draw\n} from './tetris'\n\nconst canvas = document.getElementById('cnvs')\nconst score = document.getElementById('score')\n\nconst tickLength = 15 //ms\nlet lastTick\nlet stopCycle\n\nfunction run() {\n  stopCycle = window.requestAnimationFrame(run)\n\n  const nextTick = lastTick + tickLength\n  // let numTicks = 0\n\n  // if (tFrame > nextTick) {\n  //   const timeSinceTick = tFrame - lastTick\n  //   numTicks = Math.floor(timeSinceTick / tickLength)\n  // }\n\n  //for (let i = 0; i < numTicks; i++) {\n    // lastTick = lastTick + tickLength\n    lastTick = nextTick\n    update(nextTick)\n  //}\n\n  draw(canvas, score)\n}\n\nlastTick = performance.now()\ninit()\nrun()\n"]}